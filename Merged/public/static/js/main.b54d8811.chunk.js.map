{"version":3,"sources":["pipeline.js","index.js"],"names":["Pipeline","state","hidden","toggle","setState","prevState","this","props","prediction","className","onClick","role","aria-label","original","preprocessed","pos_tagged","React","Component","NLPInterface","MIN_WORDS","MAX_WORDS","text","wordsHint","loading","error","emoji","random","fetch","then","response","json","article","title","getWordsHint","catch","updateInput","value","target","count","split","length","predict","method","headers","body","JSON","stringify","autoFocus","disabled","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b54d8811.chunk.js","sourcesContent":["import React from 'react';\nexport class Pipeline extends React.Component {\n  state = { hidden: true }\n  toggle = () => {\n    this.setState(prevState => ({ hidden: !prevState.hidden }))\n  };\n\nrender() {\n  if (this.props.prediction)\n    return (\n      <div className=\"pipeline\">\n        <p className=\"show\" onClick={this.toggle}>\n          {this.state.hidden ? 'Show' : 'Hide'} Text Processing Summary <span role=\"img\" aria-label=\"Show pipeline\">ðŸ¡‡</span></p>\n\n        <div className=\"output\" hidden={this.state.hidden}>\n          <div>\n            <h2>Original News Article</h2>\n            {this.props.original}\n          </div>\n          <div>\n            <h2>Preprocessed Text</h2>\n            {this.props.preprocessed}\n          </div>\n          <div>\n            <h2>Pos-Tagged Text</h2>\n            {this.props.pos_tagged}\n          </div>\n        </div>\n      </div>\n    )\n\n  return null\n}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pipeline } from './pipeline'\nimport './index.scss';\nclass NLPInterface extends React.Component {\n\n  MIN_WORDS = 25;\n  MAX_WORDS = 3500;\n\n  state = {\n    text: '',\n    wordsHint: `You have to write at least ${this.MIN_WORDS} words`,\n    loading: false,\n    error: false,\n    prediction: null,\n    original: null,\n    pos_tagged: null,\n    preprocessed: null,\n    emoji: true\n  }\n\n\n  random = () => fetch(\"/random\")\n    .then(response => response.json())\n    .then(article => article.title + '\\n\\n' + article.text)\n    .then(text => this.setState({\n      text, wordsHint: this.getWordsHint(text), prediction: null,\n      original: null,\n      pos_tagged: null,\n      preprocessed: null,\n      emoji: false\n    }))\n    .catch(error => this.setState({ error: true, emoji: false }));\n\n  updateInput = ({ target: { value } }) => this.setState({ text: value, prediction: null, wordsHint: this.getWordsHint(value) });\n\n  getWordsHint = (text) => {\n    let count = text.split(/\\s/).length;\n    if (count < this.MIN_WORDS) return `You have to write ${this.MIN_WORDS - count} more words`\n    if (count >= this.MIN_WORDS) return `You can write up to ${this.MAX_WORDS - count} more words`\n  }\n  predict = () => {\n    if (this.MAX_WORDS - this.state.text.split(/\\s/).length < 0) return;\n\n    this.setState({ loading: true, prediction: null });\n\n    fetch(\"/predict\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state.text)\n    })\n      .then(response => response.json())\n      .then(({ original, pos_tagged, preprocessed, prediction }) => {\n        this.setState({ loading: false, prediction, original, pos_tagged, preprocessed })\n      })\n      .catch(error => this.setState({ loading: false, error: true }))\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1> Fake News Detector</h1>\n        <textarea autoFocus disabled={this.state.loading} value={this.state.text} onChange={this.updateInput}>\n        </textarea>\n\n        <span className=\"hint\"> {this.state.wordsHint}</span>\n\n        <button disabled={this.state.loading} className=\"random\" onClick={this.random}>\n        \n          Click Here to Generate  News  <span>Click here</span>.\n          <span role=\"img\" className=\"emoji bounce\">\n           {this.state.emoji ? \" \" : \"\"}\n          </span>\n        </button>\n        <button disabled={\n          this.state.loading ||\n          this.MIN_WORDS - this.state.text.split(/\\s/).length > 0 ||\n          this.MAX_WORDS - this.state.text.split(/\\s/).length < 0} className=\"cta\" onClick={this.predict}> Predict </button>\n\n        {this.state.loading ? <h1>Classifying ...</h1> : ''}\n\n        {this.state.error ? <h1>ERROR</h1> : ''}\n\n        <h1 className={this.state.prediction}>\n          {this.state.prediction}\n        </h1>\n        <hr></hr> \n        <Pipeline\n          prediction={this.state.prediction}\n          original={this.state.original}\n          pos_tagged={this.state.pos_tagged}\n          preprocessed={this.state.preprocessed}\n        />\n      </div>\n    )\n  }\n}\n\n\n\nReactDOM.render(\n  <NLPInterface />,\n  document.getElementById('root'));\n"],"sourceRoot":""}